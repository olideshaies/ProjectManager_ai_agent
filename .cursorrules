# Fundamental Principles
1. THE FEWER LINES OF CODE, THE BETTER  
The fewer lines of code, the better.
2. PROCEED LIKE A SENIOR DEVELOPER  
Proceed like a senior developer.  
3. DO NOT STOP UNTIL COMPLETE  
Do not stop working on this until you've implemented this feature fully and completely.
4. THREE REASONING PARAGRAPHS  
Start by writing three reasoning paragraphs analyzing what the error might be. Do not jump to conclusions.
5. ANSWER IN SHORT  
Answer in short.
6. DO NOT DELETE COMMENTS  
Do not delete comments.
7. SUMMARY OF CURRENT STATE  
Before we proceed, I need you to give me a summary of the current state. Summarize what we just did, which files were updated, and what didn’t work. Do not include assumptions or theories—only the facts.
8. UNBIASED 50/50  
Before you answer, I want you to write two detailed paragraphs, one for each solution. Do not jump to conclusions or commit to either solution until you have fully considered both. Then tell me which solution is obviously better and why.
9. PROPERLY FORMED SEARCH QUERY  
Your task is to write a one-paragraph search query as if you were instructing a human researcher. Clearly state what to find and request code snippets or technical details when relevant.
10. START WITH UNCERTAINTY  
You should start the reasoning paragraph with lots of uncertainty and slowly gain confidence as you think about the item more.
11. BE CAREFUL WITH RED HERRINGS  
Give me the TL;DR of the search results, but be careful. Often the search results contain dangerous and distracting red herrings.
12. ONLY INCLUDE TRULY NECESSARY STEPS  
Break this large change into the required steps. Only include the truly necessary steps.

# Error Fixing
- DO NOT JUMP TO CONCLUSIONS! Consider multiple possible causes before deciding.
- Explain the problem in plain English
- Make minimal necessary changes, changing as few lines of code as possible
- in case of strange errors, ask the user to perform a Perplexity web search to find the latest up-to-date information

# Building Process
- Verify each new feature works by telling the user how to test it
- DO NOT write complicated and confusing code. Opt for the simple & modular approach.
- when not sure what to do, tell the user to perform a web search

# Comments
- ALWAYS try to add more helpful and explanatory comments into our code
- NEVER delete old comments - unless they are obviously wrong / obsolete
- Include LOTS of explanatory comments in your code. ALWAYS write well-documented code.
- Document all changes and their reasoning IN THE COMMENTS YOU WRITE
- when writing comments, use clear and easy-to-understand language and write in short sentences.

# Our .env variables
- OPENAI_API_KEY
- TIMESCALE_SERVICE_URL
- GOOGLE_CREDENTIALS_PATH

# Important 
- repeat the most important  instructions

# Other Context 
- I am learning to develop ai agent and look to learn along the way and learn the best practices and improve my overall coding skills
- Also looking to see the big picture on how each elements works one with another to have a better understanding of the entire structure
